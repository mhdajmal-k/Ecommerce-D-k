<%- include ("../partilas/admin") %>
<link rel="stylesheet" href="/asset/css/cropper.css">
    <section class="content-main">
        <form method="post" action="/admin/addproduct" id="form" enctype="multipart/form-data">
            <% if (locals.message) { %>
                <p>
                    <%= message %>
                </p>
                <% } %>
                    <div class="row">
                        <div class="col-9">
                            <div class="content-header">
                                <h2 class="content-title">Add New Product</h2>

                            </div>
                        </div>
                        <div class="col-lg-6" style="width: 100%;">
                            <div class="card mb-4">
                                <div class="card-body">
                                    <!-- <div class="mb-4">
                                        <label for="product_title" class="form-label">Product ID</label>
                                        <input type="text" name="productId" placeholder="Type here"
                                            onblur="validateId()" class="form-control" id="product_id">
                                        <p id="productError" class="text-danger "></p>
                                    </div> -->
                                    <div class="mb-4">
                                        <label for="product_title" class="form-label">Product title</label>
                                        <input type="text" name="productName" placeholder="Type here"
                                            onblur="validateTittle()" class="form-control" id="product_title">
                                        <p id="productTitleError" class="text-danger "></p>
                                    </div>
                                    <div class="row gx-3">
                                        <div class="col-md-4  mb-3">
                                            <label for="product_color" class="form-label">Color</label>
                                            <input type="text" placeholder="Type here" name="color"
                                                onkeyup="validateColor()" class="form-control" id="product_color">
                                            <p id="productColorError" class="text-danger "></p>
                                        </div>



                                        <!-- <  CHECK BOX -->
                                        <div class="col-md-4 mb-3">
                                            <label for="sizeS" class="form-label">Size S:</label>
                                            <input type="number" id="sizeS" name="sizeS" required class="form-control"
                                                min="1" max="500" placeholder="Enter the quantity">
                                        </div>

                                        <div class="col-md-4 mb-3">
                                            <label for="sizeM" class="form-label">Size M:</label>
                                            <input type="number" id="sizeM" name="sizeM" required="quantity error"
                                                class="form-control" min="1" max="500" placeholder="Enter the quantity">
                                        </div>

                                        <div class="col-md-4 mb-3">
                                            <label for="sizeL" class="form-label">Size L:</label>
                                            <input type="number" id="sizeL" name="sizeL" required class="form-control"
                                                min="1" max="500" placeholder="Enter the quantity">
                                        </div>

                                        <div class="col-md-4 mb-3">
                                            <label for="sizeXL" class="form-label">Size XL:</label>
                                            <input type="number" id="sizeXL" name="sizeXL" required class="form-control"
                                                min="1" max="500" placeholder="Enter the quantity">
                                        </div>

                                        <div class="mb-4" style="width:20%;">
                                            <label class="form-label">Price</label>
                                            <input type="number" name="price" placeholder="Type here"
                                                onblur="validatePrice()" class="form-control" id="product_price">
                                            <p id="productPriceError" class="text-danger "></p>
                                        </div>
                                        <div class="mb-4" style="width:20%;">
                                            <label class="form-label">Selling price</label>
                                            <input type="number" name="sellingPrice" onchange="validateSellingPrice()"
                                                placeholder="Type here" class="form-control" id="sellingPrice">
                                            <p id="sellingPriceError" class="text-danger "></p>
                                        </div>
                                        <div class="mb-4">
                                            <label class="form-label">category</label>
                                            <select class="form-select" name="categories">
                                                <% if (locals.category) { %>
                                                    <% for( let i=0; i < category.length; i++ ) { %>
                                                        <option value="<%=category[i]._id %>">
                                                            <%=category[i].categoryTitle %>
                                                        </option>


                                                        <% } %>

                                                            <% } %>

                                            </select>
                                        </div>
                                    </div>

                                </div>
                            </div> <!-- card end// -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div>
                                        <label class="form-label">Description</label>
                                        <input type="text" name="description" placeholder="Type here"
                                            onblur="validateDescription()" class="form-control" id="product_Description"
                                            rows="4">
                                        <p id="productDescriptionError" class="text-danger "></p>
                                    </div>
                                </div>
                            </div> <!-- card end// -->
                            <div class="card mb-4">
                                <div class="card-body">
                                    <div>
                                        <label class="form-label">Images</label>
                                        <input class="form-control imageInput" name="images" type="file" accept="image/*"id="imageInput" multiple onchange="crope(event)">
                                        <div id="imagePreviewContainer" style="display: none;">
                                            <div id="imagePreviews" style="width: 100px;"></div>
                                            <div id="imagePreview" style="width: 100px;"></div>

                                            
                                            <button id="deselectButton">Deselect All</button>

                                            <p id="imageValidationError" style="color: red; display: none;"></p>

                                        </div>


                                    </div>
                                </div>
                            </div>
                            <div class="text-center">
                                <!-- <button class="btn btn-light rounded font-sm mr-5 text-body hover-up">Save to draft</button> -->
                                <input type="submit" value="submit" class="btn btn-success">
                                <p id="submitError" class="text-danger error"></p>
                            </div> <!-- card end// -->
                        </div>

        </form>
    </section>
    
    <div class="modal fade" id="modal" tabindex="-1" role="dialog" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="modalLabel">Crop the image</h5>
              <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                <span aria-hidden="true">&times;</span>
              </button>
            </div>
            <div class="modal-body">
              <div class="img-container">
                <img id="image" src="https://avatars0.githubusercontent.com/u/3456749">
              </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-primary" id="crop">Crop</button>
                <button type="button" class="btn btn-primary" id="next">Next</button>
            </div>
          </div>
        </div>
       <!-- Ensure all necessary scripts are included -->
<script src="https://unpkg.com/jquery@3/dist/jquery.min.js" crossorigin="anonymous"></script>
<script src="https://unpkg.com/bootstrap@4/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
<script src="/asset/js/cropper/cropper.js"></script>

<script>
   $(document).ready(function () {
    // Define variables
    var croppers = []; // Array to store Cropper instances for each image
    var $modal = $('#modal');
    var $progress = $('.progress');
    var $alert = $('.alert');
    var $progressBar = $('.progress-bar');
    var imageInputs = document.querySelectorAll('.imageInput'); // Get all image input elements
    var currentImageIndex = 0; // Index of the current image being cropped

    // Function to initialize Cropper for a specific image
    function initializeCropper(image) {
        var cropper = new Cropper(image, {
            aspectRatio: 1,
            viewMode: 3,
        });
        croppers.push(cropper); // Add Cropper instance to the array
    }

    // Function to destroy all Cropper instances
    function destroyAllCroppers() {
        croppers.forEach(function (cropper) {
            cropper.destroy();
        });
        croppers = []; // Reset the array
    }

    // Function to handle cropping and uploading
    function cropAndUpload() {
        var cropper = croppers[currentImageIndex];
        var canvas = cropper.getCroppedCanvas({
            width: 160,
            height: 160,
        });

        // You can get the cropped image as a blob URL like this:
        canvas.toBlob(function (blob) {
            var croppedBlobUrl = URL.createObjectURL(blob);

            // Create an image element
            var imgElement = document.createElement('img');
            imgElement.src = croppedBlobUrl;
            imgElement.style.maxWidth = '100%'; // Ensure the image fits the container

            // Append the image element to imagePreviews div
            var imagePreviewsDiv = document.getElementById('imagePreviews');
            imagePreviewsDiv.appendChild(imgElement);

            // Increment currentImageIndex
            currentImageIndex++;

            // Check if there are more images to crop
            if (currentImageIndex < imageInputs.length) {
                // Show next image for cropping
                var nextInput = imageInputs[currentImageIndex];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var image = document.createElement('img');
                    image.src = e.target.result;
                    $modal.find('.modal-body').html(image); // Replace modal body content with the image
                };
                reader.readAsDataURL(nextInput.files[0]);
            } else {
                // Show the image preview container when all images are cropped
                var imagePreviewContainer = document.getElementById('imagePreviewContainer');
                imagePreviewContainer.style.display = 'block';
                // Hide the modal
                $modal.modal('hide');
                // Destroy Cropper instances after cropping all images
                destroyAllCroppers();
            }
        }, 'image/jpeg');
    }

    // Event listener for cropping button
    document.getElementById('crop').addEventListener('click', function () {
        cropAndUpload();
    });

    document.getElementById('next').addEventListener('click', function () {
            if (currentImageIndex < imageInputs.length - 1) {
                currentImageIndex++;
                var nextInput = imageInputs[currentImageIndex];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var image = document.createElement('img');
                    image.src = e.target.result;
                    $modal.find('.modal-body').html(image); // Replace modal body content with the image
                };
                reader.readAsDataURL(nextInput.files[0]);
            }
        });

    // Event listener for file input change
    imageInputs.forEach(function (input) {
        input.addEventListener('change', function (event) {
            const files = event.target.files;
            if (files && files.length > 0) {
                const file = files[0];
                var reader = new FileReader();
                reader.onload = function (e) {
                    var image = document.createElement('img');
                    image.src = e.target.result;
                    $modal.find('.modal-body').html(image); // Replace modal body content with the image
                    $modal.modal('show');
                    $modal.one('shown.bs.modal', function () {
                        initializeCropper(image); // Initialize Cropper for the current image
                    });
                    $modal.one('hidden.bs.modal', function () {
                        // Destroy Cropper when modal is hidden
                        destroyAllCroppers();
                    });
                };
                reader.readAsDataURL(file);
            }
        });
    });
});
</script>

          
    <script>

        const product_title = document.getElementById("product_title")
        const product_color = document.getElementById("product_color")
        const size = document.getElementsByClassName("size")


        if (files && files.length > 0) {
          file = files[0];

          if (URL) {
            done(URL.createObjectURL(file));
          } else if (FileReader) {
            reader = new FileReader();
            reader.onload = function (e) {
              done(reader.result);
            };
            reader.readAsDataURL(file);
          }
        }
        const product_Description = document.getElementById("product_Description")
        const productPrice = document.getElementById("product_price")
        const sellingPrice = document.getElementById("sellingPrice")
    
        const productTitleError = document.getElementById("productTitleError")
        const productColorError = document.getElementById("productColorError")
        const sizeError = document.getElementsByClassName("sizeError")
        const productDescriptionError = document.getElementById("productDescriptionError")
        const productPriceError = document.getElementById("productPriceError")
        const sellingPriceError = document.getElementById("sellingPriceError")
        const input = document.getElementById("imageInput")
        const errorDisplay = document.getElementById('imageValidationError');

  
        function validateTittle() {
            const productName = product_title.value.trim()
            if (productName == "") {
                productTitleError.style.display = "block"
                productTitleError.innerHTML = "product Name must be required"
            } else if (productName.length > 60) {
                productTitleError.style.display = "block"
                productTitleError.innerHTML = "product Name must be short"
            } else {
                productTitleError.innerHTML = ""
                productTitleError.style.display = "none"
            }
        }

        function validateColor() {
            const color = product_color.value.trim()
            if (color == '') {
                productColorError.style.display = "block"
                productColorError.innerHTML = "this flied must be required"
            } else if (color.length > 20) {
                productColorError.style.display = "block"
                productColorError.innerHTML = "color must valid"
            } else {
                productColorError.style.display = "none"
                productColorError.innerHTML = ""
            }
        }

        function validateDescription() {
            const description = product_Description.value.trim()
            if (description == "") {
                productDescriptionError.style.display = "block"
                productDescriptionError.innerHTML = "Product Description must be required"
            } else if (description.length < 10) {
                productDescriptionError.style.display = "block"
                productDescriptionError.innerHTML = "Product Description is short"
            } else {
                productDescriptionError.style.display = "none"
                productDescriptionError.innerHTML = ""
            }
        }
        function validatePrice() {
            const price = productPrice.value
            if (price === "") {
                productPriceError.style.display = "block";
                productPriceError.innerHTML = "Invalid price 1";
            } else if (price < 0) {
                productPriceError.style.display = "block";

                productPriceError.innerHTML = "Invalid price 2";
            } else {
                productPriceError.style.display = "none";
                productPriceError.innerHTML = "";


            }
        }




        function validateSellingPrice() {

            const price = productPrice.value;
            const selling = sellingPrice.value


            if (selling === "") {
                sellingPriceError.style.display = "block"
                sellingPriceError.innerHTML = "its must be required!"
            }
            else if (selling > price) {

                sellingPriceError.style.display = "block"
                sellingPriceError.innerHTML = "INvalid price1!"
            } else if (selling < 0) {

                sellingPriceError.style.display = "block"
                sellingPriceError.innerHTML = "INvalid price3!"
            }
            else {

                sellingPriceError.style.display = "none"
                sellingPriceError.innerHTML = ""
            }
        }
        function validateImages() {
    errorDisplay.style.display = 'none';

    const files = input.files;


    if (files.length > 5) {
        errorDisplay.style.display = 'block';
        errorDisplay.innerHTML = 'Image limit is 5';
        return false;
    }
}



        document.getElementById("form").addEventListener("submit", (e) => {




            validateTittle()

            validateColor()

            validatePrice()


            validateDescription()

            validateSellingPrice()
            validateImages()




            // productError.innerHTML ||
            if (productTitleError.innerHTML || productColorError.innerHTML || productPriceError.innerHTML || productDescriptionError.innerHTML || sellingPriceError.innerHTMl || errorDisplay.innerHTML) {

                e.preventDefault();
            } else {



            }
        })

        const imageInput = document.getElementById('imageInput');
        const imagePreviews = document.getElementById('imagePreviews');
        const imagePreviewContainer = document.getElementById('imagePreviewContainer');
        const deselectButton = document.getElementById('deselectButton');


        // imageInput.addEventListener('change', function (event) {
        //     const files = event.target.files;

        //     if (files) {
        //         imagePreviews.innerHTML = '';


        //         Array.from(files).forEach(file => {
        //             const reader = new FileReader();
        //             reader.onload = function (e) {
        //                 const imgElement = document.createElement('img');
        //                 imgElement.src = e.target.result;
        //                 imgElement.classList.add('previewImage');
        //                 imagePreviews.appendChild(imgElement);  
        //             };
        //             reader.readAsDataURL(file);
        //         });
        //         imagePreviewContainer.style.display = 'block';
        //     }
        // });


        // deselectButton.addEventListener('click', function () {
        //     imageInput.value = '';
        //     imagePreviews.innerHTML = '';
        //     imagePreviewContainer.style.display = 'none';
        // });

        let selectedFiles = [];

        imageInput.addEventListener('change', function (event) {
        const files = event.target.files;

        if (files) {
            imagePreviews.innerHTML = '';
            selectedFiles = Array.from(files);

            selectedFiles.forEach(file => {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const imgElement = document.createElement('img');
                    imgElement.src = e.target.result;
                    imgElement.classList.add('previewImage');

                   
                    imgElement.addEventListener('click', function () {
                        
                        imagePreviews.removeChild(imgElement);
                        selectedFiles = selectedFiles.filter(selectedFile => selectedFile !== file);
                      
                        const remainingFileList = new DataTransfer();
                        selectedFiles.forEach(file => {
                            remainingFileList.items.add(file);
                        });
                    
                        imageInput.files = remainingFileList.files;
                    }); 

                    imagePreviews.appendChild(imgElement);
                };
                reader.readAsDataURL(file);
            });

            imagePreviewContainer.style.display = 'block';
        }
    });


deselectButton.addEventListener('click', function () {
    imageInput.value = '';
    imagePreviews.innerHTML = '';
    imagePreviewContainer.style.display = 'none';
});




    </script>